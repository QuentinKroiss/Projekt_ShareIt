@page "/objectViewHistory/{foodItemId}"
@using ShareIt.Shared
@using ShareIt.Client.Service
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IFoodItemService FoodItemService
@inject PexelsImageService PexelsImageService

@if (foodItem != null)
{
    <div class="food-item-container">
        <div class="food-item-header">
            <h4>@foodItem.Name</h4>
            <p class="price">Preis: @foodItem.Price €</p>
        </div>
        <div class="food-item-details">
            <div class="food-item-description">
                <p>Kategorie: @foodItem.Category.ToString()</p>
                <p>Beschreibung: @foodItem.Description</p>
                @if (foodItem.Category == Category.Lebensmittel || foodItem.Category == Category.Getränke)
                {
                    <p>MHD: @foodItem.MHD</p>
                }
            </div>
            <div class="food-item-address">
                <p>Adresse zur Abholung:</p>
                <p>@foodItem.Street</p>
                <p>@foodItem.PostalCode @foodItem.City</p>
            </div>
            <div class="food-item-image-container">
                @if (IsValidUrl(foodItem.ImageUrl))
                {
                    <img class="food-item-image" src="@foodItem.ImageUrl" alt="Bild" />
                }
                else
                {
                    <img class="food-item-image" src="https://i.ibb.co/nLNpg7H/blank-profile-picture-gb0d3bbf79-1280.png" alt="Bild" />
                }
            </div>
            <div class="uploaded-by">
                <span>Dieser Artikel wurde von </span>
                <span class="username">@foodItem.UserName</span>
                <span> hochgeladen</span>
            </div>
        </div>
    </div>
    <div class="button-container">
        <button class="blue-button" @onclick="EditItem">Angaben ändern</button>
        <button class="blue-button" @onclick="ShowDeleteConfirmation">Artikel löschen</button>
    </div>
}
else
{
    <p>Das Food-Objekt konnte nicht geladen werden.</p>
}

@if (showDeleteConfirmation)
{
    <div class="delete-confirmation" style="margin-bottom: 20px;">
        <div class="delete-confirmation-content">
            <p>Möchten Sie diesen Artikel wirklich löschen?</p>
            <div class="delete-confirmation-buttons">
                <button class="blue-button" @onclick="DeleteItem">Ja</button>
                <button class="blue-button" @onclick="HideDeleteConfirmation">Nein</button>
            </div>
        </div>
    </div>
}

@if (showEditForm)
{
    <div class="edit-form-overlay"></div>
    <div class="edit-form-container" style="margin-bottom: 20px;">
        <h4>Angaben ändern</h4>
        <EditForm Model="@editedFoodItem">
            <div class="form-group">
                <label for="name">Name</label>
                <input class="form-control" id="name" @bind="@editedFoodItem.Name" />
            </div>

            <div class="form-group">
                <button class="btn btn-outline-secondary btn-sm" type="button" @onclick="LoadImageOptions">🔍 Bilder vorschlagen</button>
            </div>

            @if (showImageSelection && imageOptions.Any())
            {
                <div class="form-group">
                    <label>Bild auswählen:</label>
                    <div class="image-grid">
                        @foreach (var img in imageOptions)
                        {
                            <img src="@img"
                     @onclick="() => SelectImage(img)"
                                 class="selectable-image @(editedFoodItem.ImageUrl == img ? "selected-image" : "")" />
                        }
                    </div>
                </div>
            }

            <div class="form-group">
                <label for="price">Preis</label>
                <input class="form-control" id="price" @bind="@editedFoodItem.Price" />
            </div>
            <div class="form-group">
                <label for="description">Beschreibung</label>
                <input class="form-control" id="description" @bind="@editedFoodItem.Description" />
            </div>
            <div class="form-group">
                <label for="category">Category</label>
                <div class="dropdown-container">
                    <select class="form-control" id="category" @bind="@editedFoodItem.Category">
                        <option value="Lebensmittel">Lebensmittel</option>
                        <option value="Getränke">Getränke</option>
                        <option value="Objekte">Objekte</option>
                    </select>
                    <div class="dropdown-arrow"></div>
                </div>
            </div>
            @if (editedFoodItem.Category == Category.Lebensmittel || editedFoodItem.Category == Category.Getränke)
            {
                <div class="form-group">
                    <label for="foodItemMHD">MHD:</label>
                    <InputDate id="foodItemMHD" class="form-control" @bind-Value="@editedFoodItem.MHD" />
                    <ValidationMessage For="@(() => editedFoodItem.MHD)" />
                </div>
            }
            <div class="form-group">
                <label for="street">Street</label>
                <input class="form-control" id="street" @bind="@editedFoodItem.Street" />
            </div>
            <div class="form-group">
                <label for="postalCode">PostalCode</label>
                <input class="form-control" id="postalCode" @bind="@editedFoodItem.PostalCode" />
            </div>
            <div class="form-group">
                <label for="city">City</label>
                <input class="form-control" id="city" @bind="@editedFoodItem.City" />
            </div>
            <div class="button-container">
                <button class="blue-button" @onclick="UpdateItem">Speichern</button>
                <button class="blue-button" @onclick="HideEditForm">Abbrechen</button>
            </div>
        </EditForm>
    </div>
}

@*
    CSS für das Design der Klasse
*@
<style>
    .food-item-container {
        margin-top: 20px;
        width: 100%;
        border: 1px solid #ccc;
        padding: 10px;
        position: relative;
        display: flex;
        flex-direction: column;
    }

    .food-item-header {
        display: flex;
        justify-content: space-between;
        align-items: baseline;
    }

    .price {
        font-weight: bold;
    }

    .food-item-details {
        margin-top: 10px;
        display: flex;
        flex-direction: column;
    }

    .food-item-description p {
        margin-bottom: 5px;
    }

    .food-item-address {
        margin-top: 10px;
        border-top: 1px solid #ccc;
        padding-top: 10px;
    }

        .food-item-address p {
            margin: 5px 0;
        }

    .food-item-image-container {
        margin-top: 10px;
        width: 100%;
        height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative; 
    }

    .food-item-image {
        max-width: 100%;
        max-height: 100%;
    }

    .uploaded-by {
        font-size: 12px;
        color: #888;
        margin-top: 5px;
    }

    .username {
        color: #007bff;
    }

    .button-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
        margin-bottom: 20px;
    }

    .blue-button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        margin: 0 10px;
        cursor: pointer;
    }

    .delete-confirmation {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        margin-bottom: 20px;
    }

    .delete-confirmation-content {
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        text-align: center;
    }

    .delete-confirmation-buttons {
        margin-top: 20px;
    }

    .edit-form {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        padding: 20px;
        border-radius: 5px;
    }

    .edit-form-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 9998;
    }

    .edit-form-container {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        z-index: 9999;
        overflow-y: auto; 
        max-height: 80%; 
        margin-bottom: 20px;
    }

    .food-item-category {
        margin-top: 10px;
    }

    .food-item-category p {
        margin: 5px 0;
    }

    .dropdown-container {
        position: relative;
    }

    .dropdown-arrow {
        position: absolute;
        top: 50%;
        right: 10px;
        transform: translateY(-50%);
        width: 0;
        height: 0;
        border-left: 5px solid transparent;
        border-right: 5px solid transparent;
        border-top: 5px solid #007bff;
        pointer-events: none;
    }

    .image-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 1rem;
    }

    .selectable-image {
        width: 150px;
        height: 100px;
        object-fit: cover;
        border: 3px solid #ccc;
        cursor: pointer;
        transition: border 0.3s;
    }

        .selectable-image:hover {
            border-color: #999;
        }

    .selected-image {
        border-color: #007bff !important;
    }

</style>

@*
    Methoden für die Frontend-Logik
*@
@code {
    [Parameter]
    public string FoodItemId { get; set; }

    private FoodItemModelWithId foodItem;
    private FoodItemModel editedFoodItem;
    private bool isLoaded;
    private bool showDeleteConfirmation;
    private bool showEditForm;
    private FoodItemService foodItemService;
    private List<string> imageOptions = new();
    private bool showImageSelection = false;

    private async Task LoadImageOptions()
    {
        if (!string.IsNullOrWhiteSpace(editedFoodItem.Name))
        {
            imageOptions = await PexelsImageService.GetImageUrlsAsync(editedFoodItem.Name, 6);
            showImageSelection = true;
        }
    }


    private void SelectImage(string url)
    {
        editedFoodItem.ImageUrl = url;
    }


    private bool IsValidUrl(string url)
    {
        if (!string.IsNullOrEmpty(url) && Uri.IsWellFormedUriString(url, UriKind.Absolute))
        {
            return true;
        }
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFoodItem();
    }

    private async Task LoadFoodItem()
    {
        isLoaded = false;

        try
        {
            if (int.TryParse(FoodItemId, out int id))
            {
                foodItem = await httpClient.GetFromJsonAsync<FoodItemModelWithId>($"api/FoodItems/{id}");
                if (foodItem != null)
                {
                    isLoaded = true;
                    StateHasChanged(); 
                    return;
                }
            }

            foodItem = null;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Fehler beim Laden des Food-Objekts: " + ex.Message);
        }
    }

    private void EditItem()
    {
        editedFoodItem = new FoodItemModelWithId
            {
                Name = foodItem.Name,
                Price = foodItem.Price,
                Description = foodItem.Description,
                ImageUrl = foodItem.ImageUrl,
                UserName = foodItem.UserName,
                Category = foodItem.Category,
                MHD = foodItem.MHD,
                Street = foodItem.Street,
                PostalCode = foodItem.PostalCode,
                City = foodItem.City,
                Views = foodItem.Views,
            };

        showEditForm = true;
    }

    private void HideEditForm()
    {
        showEditForm = false;
    }

    private async Task UpdateItem()
    {
        var response = await httpClient.PutAsJsonAsync($"api/FoodItems/{foodItem.Id}", editedFoodItem);
        
        if (response.IsSuccessStatusCode)
        {
            var updatedFoodItem = await response.Content.ReadFromJsonAsync<FoodItemModelWithId>();
            if (updatedFoodItem != null)
            {
                foodItem = updatedFoodItem;
                showEditForm = false;
            }
        }
        navigationManager.NavigateTo("/verlauf");
        
    }

    private void ShowDeleteConfirmation()
    {
        showDeleteConfirmation = true;
    }

    private void HideDeleteConfirmation()
    {
        showDeleteConfirmation = false;
    }

    private async Task DeleteItem()
    {
        try
        {
            await httpClient.DeleteAsync($"api/FoodItems/{foodItem.Id}");
            navigationManager.NavigateTo("/verlauf");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Fehler beim Löschen des Food-Objekts: " + ex.Message);
        }
    }

    private bool IsCategorySelected(Category category)
    {
        return editedFoodItem.Category == category;
    }
}