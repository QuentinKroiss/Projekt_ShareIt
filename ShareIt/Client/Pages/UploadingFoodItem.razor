@page "/upload-food-item"
@using ShareIt.Client.Service
@using ShareIt.Shared
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IFoodItemService FoodItemService
@inject NavigationManager NavigationManager
@inject PexelsImageService PexelsImageService

<h3 class="text-center">Artikel hochladen</h3>
<p class="text-center mt-2">Was möchten Sie hochladen?</p>

<EditForm Model="@foodItem" OnSubmit="UploadFoodItem">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">

                @if (!string.IsNullOrEmpty(uploadResult?.ErrorMessage))
                {
                    <div class="alert alert-danger">
                        @uploadResult.ErrorMessage
                    </div>
                }

                <div class="form-group">
                    <div class="category-container">
                        <div class="category-item" @onclick="() => SetCategory(Category.Lebensmittel)">
                            <div class="category-name">Lebensmittel</div>
                            @if (foodItem.Category == Category.Lebensmittel)
                            {
                                <div class="selected-indicator"></div>
                            }
                        </div>
                        <div class="category-item" @onclick="() => SetCategory(Category.Getränke)">
                            <div class="category-name">Getränke</div>
                            @if (foodItem.Category == Category.Getränke)
                            {
                                <div class="selected-indicator"></div>
                            }
                        </div>
                        <div class="category-item" @onclick="() => SetCategory(Category.Objekte)">
                            <div class="category-name">Objekte</div>
                            @if (foodItem.Category == Category.Objekte)
                            {
                                <div class="selected-indicator"></div>
                            }
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="foodItemName">Name:</label>
                    <input id="foodItemName" class="form-control" @bind="foodItem.Name" />
                    <ValidationMessage For="@(() => foodItem.Name)" />
                </div>

                @if (!string.IsNullOrWhiteSpace(foodItem.Name))
                {
                    <div class="form-group">
                        <button class="btn btn-outline-secondary" type="button" @onclick="LoadImageOptions">🔍 Bilder vorschlagen</button>
                    </div>
                }

                @if (showImageSelection && imageOptions.Any())
                {
                    <div class="form-group">
                        <label>Bild auswählen:</label>
                        <div class="image-grid">
                            @foreach (var img in imageOptions)
                            {
                                <img src="@img"
                             @onclick="() => SelectImage(img)"
                                     class="selectable-image @(foodItem.ImageUrl == img ? "selected-image" : "")" />
                            }
                        </div>
                    </div>
                }

                <div class="form-group">
                    <label for="foodItemPrice">Preis:</label>
                    <input id="foodItemPrice" class="form-control" @bind="foodItem.Price" />
                    <ValidationMessage For="@(() => foodItem.Price)" />
                </div>

                <div class="form-group">
                    <label for="foodItemDescription">Beschreibung:</label>
                    <textarea id="foodItemDescription" class="form-control" @bind="foodItem.Description"></textarea>
                    <ValidationMessage For="@(() => foodItem.Description)" />
                </div>

                @if (foodItem.Category == Category.Lebensmittel || foodItem.Category == Category.Getränke)
                {
                    <div class="form-group">
                        <label for="foodItemMHD">MHD:</label>
                        <InputDate id="foodItemMHD" class="form-control" @bind-Value="foodItem.MHD" />
                        <ValidationMessage For="@(() => foodItem.MHD)" />
                    </div>
                }

                <div class="form-group mt-4">
                    <label for="foodItemAddress">Wo soll dieser Artikel abgeholt werden können?</label>
                    <div class="address-container">
                        <div class="form-group">
                            <label for="foodItemStreet">Straße:</label>
                            <input id="foodItemStreet" class="form-control" @bind="foodItem.Street" />
                            <ValidationMessage For="@(() => foodItem.Street)" />
                        </div>
                        <div class="form-group">
                            <label for="foodItemPostalCode">Postleitzahl:</label>
                            <input id="foodItemPostalCode" class="form-control" @bind="foodItem.PostalCode" />
                            <ValidationMessage For="@(() => foodItem.PostalCode)" />
                        </div>
                        <div class="form-group">
                            <label for="foodItemCity">Stadt:</label>
                            <input id="foodItemCity" class="form-control" @bind="foodItem.City" />
                            <ValidationMessage For="@(() => foodItem.City)" />
                        </div>
                    </div>
                </div>

                <div class="form-group text-center">
                    <button class="btn btn-primary" type="submit">Hochladen</button>
                    <button class="btn btn-secondary" type="reset">Zurücksetzen</button>
                </div>

            </div>
        </div>
    </div>
</EditForm>

@*
    CSS für das Design der Seite
*@
<style>
    .category-container {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
    }

    .category-item {
        width: 30%;
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 10px;
        text-align: center;
        cursor: pointer;
        position: relative;
    }

        .category-item:hover {
            background-color: #f8f8f8;
        }

    .category-name {
        font-weight: bold;
    }

    .selected-indicator {
        position: absolute;
        bottom: -5px;
        left: 0;
        right: 0;
        height: 5px;
        background-color: #007bff;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .address-container {
        border: 2px solid #007bff;
        padding: 10px;
        border-radius: 4px;
        margin-top: 10px;
    }

    .image-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 1rem;
    }

    .selectable-image {
        width: 150px;
        height: 100px;
        object-fit: cover;
        border: 3px solid #ccc;
        cursor: pointer;
        transition: border 0.3s;
    }

        .selectable-image:hover {
            border-color: #999;
        }

    .selected-image {
        border-color: #007bff !important;
    }
</style>

@*
    Methoden für die Frontend-Logik
*@
@code {
    private FoodItemModel foodItem = new FoodItemModel();
    private FoodItemResult uploadResult;
    private List<string> imageOptions = new();
    private bool showImageSelection = false;

    private void SetCategory(Category category)
    {
        foodItem.Category = category;
    }

    private async Task LoadImageOptions()
    {
        imageOptions = await PexelsImageService.GetImageUrlsAsync(foodItem.Name, 6);

        // Fallback-Bild, wenn keine API-URLs verfügbar sind
        if (imageOptions == null || !imageOptions.Any())
        {
            imageOptions = new List<string> {
            "https://i.ibb.co/nLNpg7H/blank-profile-picture-gb0d3bbf79-1280.png"
        };
        }

        showImageSelection = true;
    }

    private void SelectImage(string url)
    {
        foodItem.ImageUrl = url;
    }

    private async Task UploadFoodItem()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        foodItem.UserName = user.Identity?.Name;

        if (string.IsNullOrEmpty(foodItem.ImageUrl))
        {
            uploadResult = new FoodItemResult
                {
                    Successful = false,
                    ErrorMessage = "Bitte wählen Sie ein Bild aus."
                };
            return;
        }

        if (foodItem.Category == Category.Lebensmittel || foodItem.Category == Category.Getränke)
        {
            if (string.IsNullOrEmpty(foodItem.Name) || foodItem.Price <= 0 || string.IsNullOrEmpty(foodItem.Description)
                || foodItem.MHD == null || string.IsNullOrEmpty(foodItem.Street) || string.IsNullOrEmpty(foodItem.PostalCode)
                || string.IsNullOrEmpty(foodItem.City))
            {
                uploadResult = new FoodItemResult
                    {
                        Successful = false,
                        ErrorMessage = "Es müssen alle Felder ausgefüllt werden, um einen Artikel hochzuladen."
                    };
                return;
            }
        }

        uploadResult = await FoodItemService.UploadFoodItem(foodItem);

        if (uploadResult.Successful)
        {
            NavigationManager.NavigateTo("/loginHome");
        }
    }
}
