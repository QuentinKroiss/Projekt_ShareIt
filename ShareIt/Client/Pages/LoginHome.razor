@page "/loginHome"
@using Microsoft.AspNetCore.Components.Authorization
@using ShareIt.Shared
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient httpClient
@inject NavigationManager navigationManager


<h2 class="sub-heading">Willkommen auf der Startseite</h2>
<p>Welche Kategorie interessiert Sie?</p>
<div class="button-container">
    <button type="button" class="category-button" @onclick="() => LoadFoodItemsByCategory(Category.Lebensmittel)">Lebensmittel</button>
    <button type="button" class="category-button" @onclick="() => LoadFoodItemsByCategory(Category.Getränke)">Getränke</button>
    <button type="button" class="category-button" @onclick="() => LoadFoodItemsByCategory(Category.Objekte)">Objekte</button>
</div>

@if (foodItems != null && foodItems.Any())
{
    <div class="food-items-container">
        @foreach (var foodItem in foodItems)
        {
            <div class="food-item-container" @onclick="() => ShowFoodItemDetails(foodItem.Id)">
                <div class="food-item-header">
                    <h4>@foodItem.Name</h4>
                </div>
                <p class="food-item-price">Preis: @foodItem.Price €</p>
                <p class="food-item-description">Beschreibung: @foodItem.Description</p>
                <div class="uploaded-by">
                    <span>Dieser Artikel wurde von </span>
                    <span class="username">@foodItem.UserName</span>
                    <span> hochgeladen</span>
                </div>
                <div class="food-item-image-container">
                    @if (IsValidUrl(foodItem.ImageUrl))
                    {
                        <img class="food-item-image" src="@foodItem.ImageUrl" alt="Bild" />
                    }
                    else
                    {
                        <img class="food-item-image" src="https://i.ibb.co/nLNpg7H/blank-profile-picture-gb0d3bbf79-1280.png" alt="Bild" />
                    }
                </div>
            </div>
        }
    </div>
}
else if (isLoaded)
{
    <p>Es wurden keine Artikel in dieser Kategorie gefunden.</p>
}

@*
    CSS für das Design der Seite
*@
<style>
    h2.sub-heading {
        text-align: center;
        color: #333;
        font-size: 24px;
        margin-bottom: 10px;
    }

    p {
        text-align: center;
        color: #555;
        font-size: 16px;
    }

    .button-container {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;
    }

    .category-button {
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 4px;
        padding: 10px 15px;
        margin-right: 10px;
        font-size: 14px;
        cursor: pointer;
    }

        .category-button:hover {
            background-color: #0056b3;
        }

    .food-items-container {
        display: flex;
        justify-content: center; /* zentriert alle Karten */
        flex-wrap: wrap; /* Umbruch nach 3 Karten */
        gap: 20px;
    }



    .food-item-container {
        border: 1px solid #ccc;
        padding: 10px;
        width: 300px; /* Feste Breite für alle Karten */
        box-sizing: border-box;
        transition: box-shadow 0.3s ease;
        display: flex;
        flex-direction: column;
        align-items: start;
    }



        .food-item-container:hover {
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
        }


    .food-item-header {
        display: flex;
        align-items: baseline;
        justify-content: space-between;
        margin-bottom: 10px;
    }

    h4 {
        color: #333;
        font-size: 18px;
        margin: 0;
    }

    .food-item-price {
        color: #888;
        font-size: 14px;
        margin: 0;
    }

    .food-item-description {
        color: #555;
        font-size: 14px;
        margin: 0;
        text-align: left;
        /* Text truncation */
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
    }


    .uploaded-by {
        font-size: 12px;
        color: #888;
        margin-top: 5px;
        text-align: left;
    }

    .username {
        color: blue;
    }

    .food-item-image-container {
        height: 200px;
        width: 100%;
        display: flex;
        align-items: center; /* Vertikal zentrieren */
        justify-content: center; /* Horizontal zentrieren */
        overflow: hidden;
        text-align: center;
    }

    .food-item-image {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain; /* Wichtig für zentriertes Verhalten */
    }
</style>

@*
    Methoden für die Frontend-Logik
*@
@code {
    private List<FoodItemModelWithId> foodItems;
    private bool isLoaded;

    private async Task LoadFoodItemsByCategory(Category category)
    {
        isLoaded = false;

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userName = user.Identity?.Name?.ToUpper(); // <- hier standardisieren

            foodItems = await httpClient.GetFromJsonAsync<List<FoodItemModelWithId>>(
                $"api/FoodItems/category/{(int)category}?excludeUser={userName}");

            isLoaded = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Fehler beim Laden der Artikel: " + ex.Message);
        }
    }


    private void ShowFoodItemDetails(int foodItemId)
    {
        navigationManager.NavigateTo($"/objectView/{foodItemId}");
    }

    private bool IsValidUrl(string url)
    {
        return Uri.IsWellFormedUriString(url, UriKind.Absolute);
    }
}